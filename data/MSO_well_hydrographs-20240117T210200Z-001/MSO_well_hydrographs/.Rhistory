RSCpred_Q <- add_predictions(Predict_dat_Q, Qcfs_LM_model, var = "RSC_mod", type = NULL) %>%
as_tibble() %>%
mutate (Q_balance = BRR_nr + CFR_abv + RSC_mod + BRR_nr - CFR_bel)
RSCpred_Q
ggplot(data = RSCpred_Q,
aes(yrmo, Q_balance)) +
geom_col(fill = "dodgerblue1",
colour = "black",
alpha = 0.5) +
labs(title = "CFR-BRR Monthly Water Balance MSO Valley", y = "SW Change (cfs)") +
scale_x_continuous(breaks = seq(1990, 2023, by = 5)) +
geom_hline(yintercept = 0) +
theme_bw()
RSCpred_Q
ggplot(data = RSCpred_Q,
aes(yrmo, Q_balance)) +
labs(title = "CFR-BRR Monthly Water Balance MSO Valley", y = "SW Change (cfs)") +
scale_x_continuous(breaks = seq(1990, 2023, by = 5)) +
geom_hline(yintercept = 0) +
theme_bw()
ggplot(data = RSCpred_Q,
aes(yrmo, Q_balance)) +
geom_col() +
labs(title = "CFR-BRR Monthly Water Balance MSO Valley", y = "SW Change (cfs)") +
scale_x_continuous(breaks = seq(1990, 2023, by = 5)) +
geom_hline(yintercept = 0) +
theme_bw()
# Run model. Predict river flow balance monthly data.
RSCpred_Q <- add_predictions(Predict_dat_Q, Qcfs_LM_model, var = "RSC_mod", type = NULL) %>%
as_tibble() %>%
mutate (Q_balance = BRR_nr + CFR_abv + RSC_mod - CFR_bel)
ggplot(data = RSCpred_Q,
aes(yrmo, Q_balance)) +
geom_col() +
labs(title = "CFR-BRR Monthly Water Balance MSO Valley", y = "SW Change (cfs)") +
scale_x_continuous(breaks = seq(1990, 2023, by = 5)) +
geom_hline(yintercept = 0) +
theme_bw()
RSCpred_Q
install.packages("readtext")
library(tidyverse)
library(readtext)
setwd("~/Documents/R/LTs_R_code")
Agents <- readtext(Tom_Larson.docx)
setwd("~/Documents/R/LTs_R_code")
Agents <- readtext("Tom_Larson.docx")
Agents
Agents <- readtext("Tom_Larson.docx$text")
Agents <- readtext("Tom_Larson.docx")
Agents
summrary(Agents)
summary(Agents)
library(textrdr)
install.packages("textreadr")
RSCpred_Q
# Run model. Predict river flow balance monthly data.
RSCpred_Q <- add_predictions(Predict_dat_Q, Qcfs_LM_model, var = "RSC_mod", type = NULL) %>%
as_tibble() %>%
mutate (Q_balance = BRR_nr + CFR_abv + RSC_mod - CFR_bel,
days = days(month(yrmo)))
RSCpred_Q
# Run model. Predict river flow balance monthly data.
RSCpred_Q <- add_predictions(Predict_dat_Q, Qcfs_LM_model, var = "RSC_mod", type = NULL) %>%
as_tibble() %>%
mutate (Q_balance = BRR_nr + CFR_abv + RSC_mod - CFR_bel,
days = days_in_month(yrmo))
RSCpred_Q
# Run model. Predict river flow balance monthly data.
RSCpred_Q <- add_predictions(Predict_dat_Q, Qcfs_LM_model, var = "RSC_mod", type = NULL) %>%
as_tibble() %>%
mutate (Q_balance = BRR_nr + CFR_abv + RSC_mod - CFR_bel,
days = days_in_month(yrmo),
acft = 1.98 * days)
RSCpred_Q
RSCpred_Q
ggplot(data = RSCpred_Q, aes(yrmo, scft)) +
geom_col(fill = "red") +
labs(title = "CFR-BRR Monthly Water Balance MSO Valley", y = "SW Change (acre feet)") +
scale_x_continuous(breaks = seq(1990, 2023, by = 5)) +
geom_hline(yintercept = 0) +
theme_bw()
ggplot(data = RSCpred_Q, aes(yrmo, acft)) +
geom_col(fill = "red") +
labs(title = "CFR-BRR Monthly Water Balance MSO Valley", y = "SW Change (acre feet)") +
scale_x_continuous(breaks = seq(1990, 2023, by = 5)) +
geom_hline(yintercept = 0) +
theme_bw()
RSCpred_Q
# Run model. Predict river flow balance monthly data.
RSCpred_Q <- add_predictions(Predict_dat_Q, Qcfs_LM_model, var = "RSC_mod", type = NULL) %>%
as_tibble() %>%
mutate (Q_balance = BRR_nr + CFR_abv + RSC_mod - CFR_bel,
days = days_in_month(yrmo),
acft = (1.98 * Q_balance) * days)
ggplot(data = RSCpred_Q, aes(yrmo, acft)) +
geom_col(fill = "red") +
labs(title = "CFR-BRR Monthly Water Balance MSO Valley", y = "SW Change (acre feet)") +
scale_x_continuous(breaks = seq(1990, 2023, by = 5)) +
geom_hline(yintercept = 0) +
theme_bw()
############## ++++++++++++++++++++++++++++++######################
# Code to read daily values from NWIS site using dataRetrieval package.
# (NOTE: Can use this to extend Rattlesnake Cr data matched to CFR/BRR to five years.)
#  This reads only daily data and cannot get stats (e.g., monthly/annual data)
# Download parameters (dataRetrieval)
siteNo <- "12340500" # CFR abv MSO
pCode <- "00060"  # Discharge code
start.date <- "1989-11-01"  # Should change this to match beginning of BRR, 1990.
end.date <- "2023-10-30"    # Ditto here, can go to most recent date, eg, 2023-12-12.
CFRabvMSO <- readNWISdv(siteNumbers = siteNo,
parameterCd = pCode,
startDate = start.date,
endDate = end.date) %>%
renameNWISColumns() %>% as_tibble()
tsCFRa <- ggplot(data = CFRabvMSO,
aes(Date, Flow)) +
geom_line()
tsCFRa
tsCFRa
CFRabvMSO
CFRabvMSO_qh <- readNWISdv(siteNumbers = siteNo,
parameterCd = pCode,
startDate = start.date,
endDate = end.date) %>%
renameNWISColumns() %>% as_tibble()
head(CFRabvMSO_qh)
pCode <- c("00060", "00065")  # Discharge code
#pCode <- 00065  # Gage height
start.date <- "1995-11-01"  # Should change this to match beginning of BRR, 1990.
end.date <- "2023-10-30"    # Ditto here, can go to most recent date, eg, 2023-12-12.
CFRabvMSO_qh <- readNWISdv(siteNumbers = siteNo,
parameterCd = pCode,
startDate = start.date,
endDate = end.date) %>%
renameNWISColumns() %>% as_tibble()
head(CFRabvMSO_qh)
#pCode <- "00060"  # Discharge code
pCode <- 00065  # Gage height
start.date <- "1995-11-01"  # Should change this to match beginning of BRR, 1990.
end.date <- "2023-10-30"    # Ditto here, can go to most recent date, eg, 2023-12-12.
CFRabvMSO_h <- readNWISdv(siteNumbers = siteNo,
parameterCd = pCode,
startDate = start.date,
endDate = end.date) %>%
renameNWISColumns() %>% as_tibble()
############## ++++++++++++++++++++++++++++++######################
# Code to read daily values from NWIS site using dataRetrieval package.
# (NOTE: Can use this to extend Rattlesnake Cr data matched to CFR/BRR to five years.)
#  This reads only daily data and cannot get stats (e.g., monthly/annual data)
# Download parameters (dataRetrieval)
siteNo <- "12340500" # CFR abv MSO
pCode <- "00060"  # Discharge code
start.date <- "1995-11-01"  # Should change this to match beginning of BRR, 1990.
end.date <- "2023-10-30"    # Ditto here, can go to most recent date, eg, 2023-12-12.
CFRabvMSO <- readNWISdv(siteNumbers = siteNo,
parameterCd = pCode,
startDate = start.date,
endDate = end.date) %>%
renameNWISColumns() %>% as_tibble()
head(CFRabvMSO)
library(tidyverse)
library(zoo)
library(imputeTS)
#library(xts)
library(zoo)
library(dataRetrieval)  # USGS GWIS data
# Set working directory to the folder with data files
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/Active Projects/Missoula_Aquifer/MSO_well_hydrographs")
list.files()
inputFile <- "id_067037.txt"
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)
) %>%
filter(between(swl_elevation, mean(swl_elevation, na.rm=TRUE) - (2.5 * sd(swl_elevation, na.rm=TRUE)),
mean(swl_elevation, na.rm=TRUE) + (2.5 * sd(swl_elevation, na.rm=TRUE))))
ggplot(RawDat, aes(x=date_measured, y=swl_elevation)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
colList <- c("gwicid", "date_measured", "swl_mp", "swl_ground", "swl_elevation")
inputFile <- "id_067037.txt"
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)
) %>%
filter(between(swl_elevation, mean(swl_elevation, na.rm=TRUE) - (2.5 * sd(swl_elevation, na.rm=TRUE)),
mean(swl_elevation, na.rm=TRUE) + (2.5 * sd(swl_elevation, na.rm=TRUE))))
RawDat <- read_tsv(inputFile) %>%
head(., -3) #
RawDat
RawDat <- read_tsv(inputFile) #%>%
problems(RawDat)
end(RawDat)
head(RawDat)
dim(RawDat)
RawDat <- read_tsv(inputFile) #%>%
dim(RawDat)
tail(RawDat)
RawDat <- read_tsv(inputFile) #%>%
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)
) %>%
filter(between(swl_elevation, mean(swl_elevation, na.rm=TRUE) - (2.5 * sd(swl_elevation, na.rm=TRUE)),
mean(swl_elevation, na.rm=TRUE) + (2.5 * sd(swl_elevation, na.rm=TRUE))))
RawDat
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)
) %>%
filter(between(swl_elev, mean(swl_elev, na.rm=TRUE) - (2.5 * sd(swl_elev, na.rm=TRUE)),
mean(swl_elev, na.rm=TRUE) + (2.5 * sd(swl_elev, na.rm=TRUE))))
RawDat
tail(RawDat)
head(RawDat)
dime(RawDat)
dim(RawDat)
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)
) #%>%
filter(between(swl_elev, mean(swl_elev, na.rm=TRUE) - (2.5 * sd(swl_elev, na.rm=TRUE)),
mean(swl_elev, na.rm=TRUE) + (2.5 * sd(swl_elev, na.rm=TRUE)))) # Removed outliers.
ggplot(RawDat, aes(x=date_measured, y=swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)
) %>%
filter(between(swl_elev, mean(swl_elev, na.rm=TRUE) - (2.5 * sd(swl_elev, na.rm=TRUE)),
mean(swl_elev, na.rm=TRUE) + (2.5 * sd(swl_elev, na.rm=TRUE)))) # Removed outliers.
ggplot(RawDat, aes(x=date_measured, y=swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)
) %>%
filter(between(swl_elev, mean(swl_elev, na.rm=TRUE) - (3 * sd(swl_elev, na.rm=TRUE)),
mean(swl_elev, na.rm=TRUE) + (3 * sd(swl_elev, na.rm=TRUE)))) # Removed outliers.
ggplot(RawDat, aes(x=date_measured, y=swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)
) #%>%  # Remove outliers if needed with this code.
ggplot(RawDat, aes(x=date_measured, y=swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
list.files()
inputFile <- "id_151203.txt"
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) #%>%
tail(RawDat)
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList))
RawDat <- RawDat[1:(dim(data2)[1]-10),]
RawDat <- RawDat[1:(dim(RawDat)[1]-10),]
tail(RawDat)
dim(RawDat)
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList))
RawDat <- RawDat[1:(dim(RawDat)[1]-2),]
tail(RawDat)
dim(RawDat)
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList))
spec(RawDat)
colList <- c("gwicid", "date_measured", "swl_mp", "swl_ground", "swl_elevation")
inputFile <- "id_151203.txt"
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)
) #%>%  # Remove outliers if needed with this code.
RawDat
YrDat <- RawDat %>%
group_by(year) %>%
summarize(mean_swl_elevation = mean(swl_elevation),
min_swl_elevation = min(swl_elevation),
max_swl_elevation = max(swl_elevation))
ggplot(id_151179, aes(x=date_measured, y=swl_elevation)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle("gwicid_151179")
ggplot(id_151179, aes(x=date_measured, y=swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle("gwicid_151179")
ggplot(YrDat, aes(x=date_measured, y=swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
YrDat <- RawDat %>%
group_by(year) %>%
summarize(mean_swl_elev = mean(swl_elev),
min_swl_elev = min(swl_elev),
max_swl_elev = max(swl_elev))
ggplot(YrDat, aes(x=date_measured, y=swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
YrDat
ggplot(YrDat, aes(x=year, y=swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
ggplot(RawDat, aes(x=date_measured, y=swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
ggplot(YrDat, aes(x=year, y=mean_swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
ggplot(YrDat, aes(x=year, y=min_swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
ggplot(YrDat, aes(x=year, y=max_swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
ggplot(YrDat, aes(x=year, y=mean_swl_elev)) +
geom_line() +
geom_point() +
geom_smooth(span = 1, method = lm) +
ggtitle(paste0(inputFile))
MoDat <- RawDat %>%
group_by(year, mo) %>%
summarize(mean_swl_elev = mean(swl_elev),
min_swl_elev = min(swl_elev),
max_swl_elev = max(swl_elev))
RawDat
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured),
yrmo = yearmon(date_measured)
) #%>%  # Remove outliers if needed with this code.
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured)) #,
RawDat
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = year(date_measured),
yrmo = yearmon(date_measured))
yearmon("1995-07-05 00:00:00")
yearmon(1995-07-05 00:00:00)
yearmon("1995-07-05")
yearmon(as.Date("1995-07-05"))
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = as.integer(year(date_measured),
month = as.integer(date_measured),
yrmo = as.yearmon(paste(year, month), "%Y %m")))   #year = year(date_measured),
RawDat
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = as.integer(year(date_measured)),
month = as.integer(month(date_measured)),
yrmo = as.yearmon(paste(year, month), "%Y %m"))   #year = year(date_measured),
RawDat
list.files()
View(RawDat)
RawDat <- read_tsv(inputFile) %>%
select(all_of(colList)) %>%
transmute(
gwicid = as.integer(gwicid),
date_measured = parse_date_time(date_measured, c('mdy', 'mdy_HMS')), # Change date format -- two formats
swl_mp = swl_mp,
swl_grd = swl_ground,
swl_elev = swl_elevation,
) %>%
mutate(
year = as.integer(year(date_measured)),
month = as.integer(month(date_measured)),
yrmo = as.yearmon(paste(year, month), "%Y %m"),
qtr = quarter(date_measured))   #year = year(date_measured),
RawDat
